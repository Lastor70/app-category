import streamlit as st
import pandas as pd
import asyncio
from datetime import datetime
from data_fetcher import fetch_data

st.set_page_config(page_title="Categorization orders", page_icon="üìà")

st.header('–§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º')
start_date = st.date_input('–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞', value=datetime(2024, 9, 1))
end_date = st.date_input('–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞', value=datetime(2024, 9, 3))

if end_date < start_date:
    st.error('–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã.')

api_key = st.secrets["api_key"]

# –ö–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–æ API
@st.cache_data
def load_data(api_key, start_date, end_date):
    # –í–∏–∫–ª–∏–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó —á–µ—Ä–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    return asyncio.run(fetch_data(api_key, start_date, end_date))

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É session_state
def fetch_and_store_data(api_key, start_date, end_date):
    with st.spinner('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...'):
        df_new = load_data(api_key, start_date.strftime('%Y-%m-%d'), end_date.strftime('%Y-%m-%d'))
        st.session_state['df_new'] = df_new
        print(df_new[df_new['–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'] == '554245UZ'])

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
if st.button('–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'):
    fetch_and_store_data(api_key, start_date, end_date)
    st.success("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

# –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö, —è–∫—â–æ –≤–æ–Ω–∏ –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ
if 'df_new' in st.session_state:
    st.write(f'–î–∞–Ω–Ω—ã–µ –∑–∞ {start_date} - {end_date}')
    st.dataframe(st.session_state['df_new'])
else:
    st.write("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")

if 'df_new' in st.session_state:
    df_new = st.session_state['df_new']
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Å—Ç–æ–≤–ø—Ü—ñ–≤
    required_columns = ['–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', 'offer_id(–∑–∞–∫–∞–∑–∞)', 'order_category', '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Å—Ä–º', 'offer_article', 'order_category', '–°–µ–±–µ—Å $ (–∏–∑ —Å—Ä–º)', '–û–ø—Ç —Ü–µ–Ω–∞ $ (—Å–µ–±–µ—Å + 25%)', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É']
    missing_columns = [col for col in required_columns if col not in df_new.columns]
    
    if missing_columns:
        st.error(f"Missing columns: {', '.join(missing_columns)}")
    else:
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        unique_categories = df_new['order_category'].unique()
        
        # –î–æ–∑–≤–æ–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –æ–±—Ä–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        selected_category = st.selectbox("–í–∏–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞", unique_categories)
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –¥–∞–Ω—ñ –∑–∞ –æ–±—Ä–∞–Ω–æ—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é
        category_filtered_data = df_new[df_new['order_category'] == selected_category]
        
        if not category_filtered_data.empty:
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö "–ù–æ–º–µ—Ä—ñ–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            unique_orders = category_filtered_data['–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'].unique()
            
            # –î–æ–∑–≤–æ–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –æ–±—Ä–∞—Ç–∏ "–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
            selected_order = st.selectbox("–í–∏–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", unique_orders)
            
            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ "–ù–æ–º–µ—Ä—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
            filtered_data = category_filtered_data[category_filtered_data['–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'] == selected_order]
            
            if not filtered_data.empty:
                # –ü–µ—Ä—à–∞ —Ç–∞–±–ª–∏—Ü—è –∑ –æ—Å–Ω–æ–≤–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                st.subheader("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö")
                first_table = {
                    '–ó–∞–∫–∞–∑': filtered_data['–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'].iloc[0],
                    'Offer-id': filtered_data['offer_id(–∑–∞–∫–∞–∑–∞)'].iloc[0],
                    'Order category': filtered_data['order_category'].iloc[0]
                }
                st.table(pd.DataFrame([first_table]))  # –ü–µ—Ä—à–∞ —Ç–∞–±–ª–∏—Ü—è
                
                # –î—Ä—É–≥–∞ —Ç–∞–±–ª–∏—Ü—è –∑ –¥–µ—Ç–∞–ª—è–º–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
                st.subheader("–î–µ—Ç–∞–ª–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º")
                second_table = filtered_data[[
                    '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Å—Ä–º', 'offer_article', 'product_category', 
                    '–°–µ–±–µ—Å $ (–∏–∑ —Å—Ä–º)', '–û–ø—Ç —Ü–µ–Ω–∞ $ (—Å–µ–±–µ—Å + 25%)', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É'
                ]]
                second_table = second_table.rename(columns={
                    'offer_article': '–ê—Ä—Ç–∏–∫—É–ª',
                    'product_category': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞',
                    '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Å—Ä–º': '–ù–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞',
                    '–°–µ–±–µ—Å $ (–∏–∑ —Å—Ä–º)': '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å $',
                    '–û–ø—Ç —Ü–µ–Ω–∞ $ (—Å–µ–±–µ—Å + 25%)': '–û–ø—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ $',
                    '–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'
                })
                
                st.dataframe(second_table)  # –î—Ä—É–≥–∞ —Ç–∞–±–ª–∏—Ü—è
                
            else:
                st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞")
        else:
            st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
else:
    st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü")
